//Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.
//
//The overall run time complexity should be O(log (m+n)).
//
// 
//
//Example 1:
//
//Input: nums1 = [1,3], nums2 = [2]
//Output: 2.00000
//Explanation: merged array = [1,2,3] and median is 2.
//
//Example 2:
//
//Input: nums1 = [1,2], nums2 = [3,4]
//Output: 2.50000
//Explanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.
//
// 
//
//Constraints:
//
//    nums1.length == m
//    nums2.length == n
//    0 <= m <= 1000
//    0 <= n <= 1000
//    1 <= m + n <= 2000
//    -106 <= nums1[i], nums2[i] <= 106



Solution :->
class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
    // Handle the case when one of the arrays is empty
    if (nums1.length == 0) {
        return findMedianSingleArray(nums2);
    }
    if (nums2.length == 0) {
        return findMedianSingleArray(nums1);
    }

    int[] merged = new int[nums1.length + nums2.length];
    int i = 0, j = 0, k = 0;

    // Merge the two arrays
    while (i < nums1.length && j < nums2.length) {
        if (nums1[i] < nums2[j]) {
            merged[k++] = nums1[i++];
        } else {
            merged[k++] = nums2[j++];
        }
    }

    // Copy remaining elements from nums1 if any
    while (i < nums1.length) {
        merged[k++] = nums1[i++];
    }

    // Copy remaining elements from nums2 if any
    while (j < nums2.length) {
        merged[k++] = nums2[j++];
    }

    // Find the median
    int n = merged.length;
    if (n % 2 == 1) {
        return merged[n / 2];
    } else {
        return (merged[n / 2 - 1] + merged[n / 2]) / 2.0;
    }
}

// Helper method to find the median of a single array
private double findMedianSingleArray(int[] nums) {
    int n = nums.length;
    if (n % 2 == 1) {
        return nums[n / 2];
    } else {
        return (nums[n / 2 - 1] + nums[n / 2]) / 2.0;
    }
}

}
