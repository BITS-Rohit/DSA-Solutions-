//You are given an array of k linked-lists lists, each linked-list is sorted in ascending order.
//
//Merge all the linked-lists into one sorted linked-list and return it.
//
// 
//
//Example 1:
//
//Input: lists = [[1,4,5],[1,3,4],[2,6]]
//Output: [1,1,2,3,4,4,5,6]
//Explanation: The linked-lists are:
//[
//  1->4->5,
//  1->3->4,
//  2->6
//]
//merging them into one sorted list:
//1->1->2->3->4->4->5->6
//
//Example 2:
//
//Input: lists = []
//Output: []
//
//Example 3:
//
//Input: lists = [[]]
//Output: []
//
// 
//
//Constraints:
//
//    k == lists.length
//    0 <= k <= 104
//    0 <= lists[i].length <= 500
//    -104 <= lists[i][j] <= 104
//    lists[i] is sorted in ascending order.
//    The sum of lists[i].length will not exceed 104.


// SOlution :->

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
    if (lists == null || lists.length == 0) return null;
    return mergeLists(lists, 0, lists.length - 1);
}

private ListNode mergeLists(ListNode[] lists, int start, int end) {
    if (start == end) return lists[start]; // Base case: Single list
    int mid = start + (end - start) / 2;
    ListNode left = mergeLists(lists, start, mid);
    ListNode right = mergeLists(lists, mid + 1, end);
    return mergeTwoLists(left, right); // Merge two sorted lists
}

private ListNode mergeTwoLists(ListNode l1, ListNode l2) {
    if (l1 == null) return l2;
    if (l2 == null) return l1;
    
    if (l1.val < l2.val) {
        l1.next = mergeTwoLists(l1.next, l2);
        return l1;
    } else {
        l2.next = mergeTwoLists(l1, l2.next);
        return l2;
    }
}


    //Approach using minHeap or PriorityQueue-------------------------

    // public ListNode mergeKLists(ListNode[] lists) {
    //     // Better or optimised Approach 
    //     if ( lists==null  || lists.length==0 )return null;
    //     PriorityQueue<ListNode>queue = new PriorityQueue<>(Comparator.comparingInt(a -> a.val));
    //     for(ListNode head : lists){
    //         if (head!=null ) queue.add(head);
    //     }
    //     ListNode dummy = new ListNode(0);
    //     ListNode cur = dummy;
    //     ListNode small=null;
    //     while(!queue.isEmpty()){
    //         small=queue.poll();
    //         cur.next=small;
    //         cur=cur.next;
    //         if ( small.next!=null)queue.add(small.next);
    //     }
    //     return dummy.next;
    // }

    // Approach using ArrayList ---------------

    // public ListNode mergeKLists(ListNode[] lists) {
    //     if ( lists.length==0)return null;
    //     // Naive approach
    //     List<ListNode> list = new ArrayList<>();
    //     ListNode temp = null;
    //     for(ListNode head : lists){
    //         temp=head;
    //         while(temp!=null){
    //             list.add(temp);
    //             temp=temp.next;
    //         }
    //     }
    //     if (list.isEmpty()) return null;
        
    //     // after this loop, all the ListNodes will be stored in the list
    //     list.sort(Comparator.comparingInt(node -> node.val));
    //     // Sorted
    //     for (int i = 1; i < list.size(); i++) {
    //         // Connect the list as per the order
    //         list.get(i-1).next=list.get(i);
    //     }
    //     list.get(list.size()-1).next=null;
    //     return list.get(0); // Returning the head of the sorted list
    // }
//}

